<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network on 西红柿的博客</title>
    <link>https://TomatoAres.github.io/tags/network/</link>
    <description>Recent content in network on 西红柿的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - TomatoAres 2019</copyright>
    <lastBuildDate>Thu, 29 Aug 2019 00:52:58 +0800</lastBuildDate>
    
	<atom:link href="https://TomatoAres.github.io/tags/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP 总结</title>
      <link>https://TomatoAres.github.io/posts/tcp-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 29 Aug 2019 00:52:58 +0800</pubDate>
      
      <guid>https://TomatoAres.github.io/posts/tcp-%E6%80%BB%E7%BB%93/</guid>
      <description>通信过程 服务端：
 socket：建立 socket bind：绑定服务端 ip listen：开始监听 accept：等待连接（阻塞） read/write：通信 close：关闭连接  三次握手——建立通信过程 参考：TCP 的三次握手与四次挥手（详解+动图）
涉及到状态：
 closed SYN_SENT SYN_RECV ESTABLISHED  四次挥手——断开连接 涉及到状态：
 ESTABLISHED FIN_WAIT1 FIN_WAIT2  问题总结  tcp 的 2MSL 问题
MSL：Maximum Segment Lifetime，最长报文时间
2MSL 即两倍的 MSL ，TCP 的 TIME_WAIT 状态也称为 2MSL 等待状态，
当 TCP 的一端发起主动关闭，在发出最后一个 ACK 包后，
即第 3 次握手完成后发送了第四次握手的 ACK 包后就进入了 TIME_WAIT 状态，
必须在此状态上停留两倍的 MSL 时间，
等待 2MSL 时间主要目的是怕最后一个 ACK 包对方没收到，
那么对方在超时后将重发第三次握手的 FIN 包，</description>
    </item>
    
    <item>
      <title>TCP UDP 总结</title>
      <link>https://TomatoAres.github.io/posts/tcp-udp/</link>
      <pubDate>Sun, 18 Aug 2019 23:30:07 +0800</pubDate>
      
      <guid>https://TomatoAres.github.io/posts/tcp-udp/</guid>
      <description> UDP 用户数据报协议，是一个无连接的简单的面向数据报的运输层协议。 UDP 不提供可靠性，它只是把应用程序传给 IP 层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。
UDP 特点  无连接：UDP 是面向无连接的通讯协议，UDP 数据包括目的端口号和源端口号信息，由于通讯不需要连接，所以可以实现广播发送。 大小限制：UDP 传输数据时有大小限制，每个被传输的数据报必须限定在 64KB 之内。 不可靠： UDP 是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方。  应用：注重速度流畅的业务 UDP是面向消息的协议，通信时不需要建立连接，数据的传输自然是不可靠的，UDP一般用于多点通信和实时的数据业务，比如
语音广播 视频 QQ TFTP(简单文件传送） SNMP（简单网络管理协议） RIP（路由信息协议，如报告股票市场，航空信息） DNS(域名解释）  UDP 构建步骤 客户端
 Socket 创建客户端套接字 sendto/recvfrom 发送/接收数据 close 关闭套接字  服务端
 Socket bind recvfrom/sendto  TCP TCP 服务器构建  socket创建一个套接字 bind绑定ip和port listen 使套接字变为可以被动链接 accept等待客户端的链接 recv/send接收发送数据  </description>
    </item>
    
  </channel>
</rss>