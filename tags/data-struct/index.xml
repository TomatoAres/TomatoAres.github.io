<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data struct on 西红柿的博客</title>
    <link>https://TomatoAres.github.io/tags/data-struct/</link>
    <description>Recent content in data struct on 西红柿的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 02 Sep 2019 23:10:56 +0800</lastBuildDate>
    
	<atom:link href="https://TomatoAres.github.io/tags/data-struct/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Radix Tree 基数树</title>
      <link>https://TomatoAres.github.io/posts/radix-tree-%E5%9F%BA%E6%95%B0%E6%A0%91/</link>
      <pubDate>Mon, 02 Sep 2019 23:10:56 +0800</pubDate>
      
      <guid>https://TomatoAres.github.io/posts/radix-tree-%E5%9F%BA%E6%95%B0%E6%A0%91/</guid>
      <description>echo 框架高效的原因主要是路由搜索用了基数树这个数据结构，还未完全理解，先留个坑，有空再来补习
定义 在计算机科学中，radix tree (也被称为 radix trie，或者 compact prefix tree)用于表示一种空间优化的 trie(prefix tree) 数据结构。
假如树中的一个节点是父节点的唯一子节点(the only child)的话，那么该子节点将会与父节点进行合并，这样就使得 radix tree 中的每一个内部节点最多拥有 r 个孩子， r 为正整数且等于 2^n(n&amp;gt;=1)。
不像是一般的 trie 树，radix tree 的边沿(edges)可以是一个或者多个元素。参看如下：
使用场景 元素个数不是太多，但是元素之间通常有很长的相同前缀时很适合采用 radix tree 来存储
参考： 数据结构之 Radix Tree https://blog.csdn.net/joker0910/article/details/8250085</description>
    </item>
    
  </channel>
</rss>