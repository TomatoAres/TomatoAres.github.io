<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on 西红柿的博客</title>
    <link>https://TomatoAres.github.io/categories/Network/</link>
    <description>Recent content in Network on 西红柿的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 22 Oct 2019 00:52:45 +0800</lastBuildDate>
    
	<atom:link href="https://TomatoAres.github.io/categories/Network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Iperf3 小结</title>
      <link>https://TomatoAres.github.io/posts/network/iperf/</link>
      <pubDate>Tue, 22 Oct 2019 00:52:45 +0800</pubDate>
      
      <guid>https://TomatoAres.github.io/posts/network/iperf/</guid>
      <description>定义  iPerf3 是用于主动测量 IP 网络上可达到的最大带宽的工具。 它支持与时序，缓冲区和协议（TCP，UDP，带有 IPv4 和 IPv6 的 SCTP）相关的各种参数的调整。 对于每个测试，它都会报告带宽，损耗和其他参数。 不向后兼容——可以说已经不是 iperf  功能 基本——Iperf2 也有  TCP 和 UDP 测试 （-u） 设置端口（-p） 设置 TCP 选项：无延迟，MSS 等。 设置 UDP 带宽（-b） 设置套接字缓冲区大小（-w） 报告间隔（-i） 设置 iPerf 缓冲区（-l） 绑定到特定接口（-B） IPv6 测试（-6） 要传输的字节数（-n） 测试时间（-t） 并行流（-P） 设置 DSCP / TOS 位向量（-S） 更改号码输出格式（-f）  iPerf 3.</description>
    </item>
    
    <item>
      <title>常见 IO 模型研究 </title>
      <link>https://TomatoAres.github.io/posts/network/%E5%B8%B8%E8%A7%81-IO-%E6%A8%A1%E5%9E%8B%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Sun, 22 Sep 2019 14:13:45 +0800</pubDate>
      
      <guid>https://TomatoAres.github.io/posts/network/%E5%B8%B8%E8%A7%81-IO-%E6%A8%A1%E5%9E%8B%E7%A0%94%E7%A9%B6/</guid>
      <description>核心信息 IO 发生时涉及的对象和步骤。对于一个 network IO （这里我们以 read 举例），它会涉及到两个系统对象，一个是调用这个 IO 的 process (or thread)，另一个就是系统内核 (kernel)。当一个 read 操作发生时，它会经历两个阶段：</description>
    </item>
    
    <item>
      <title>Rpc 标准库的几种实现方式</title>
      <link>https://TomatoAres.github.io/posts/network/rpc-%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 12 Sep 2019 11:43:50 +0800</pubDate>
      
      <guid>https://TomatoAres.github.io/posts/network/rpc-%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      <description>server server.go
package main import ( &amp;quot;errors&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;net&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;net/rpc&amp;quot; ) type Args struct { A, B int } type Quotient struct { Quo, Rem int } type Arith int func (t *Arith) Multiply(args *Args, reply *int) error { *reply = args.</description>
    </item>
    
    <item>
      <title>TCP 总结</title>
      <link>https://TomatoAres.github.io/posts/network/TCP-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 29 Aug 2019 00:52:58 +0800</pubDate>
      
      <guid>https://TomatoAres.github.io/posts/network/TCP-%E6%80%BB%E7%BB%93/</guid>
      <description>通信过程 服务端：
 socket：建立 socket bind：绑定服务端 ip listen：开始监听 accept：等待连接（阻塞） read/write：通信 close：关闭连接  三次握手——建立通信过程 参考：TCP 的三次握手与四次挥手（详解+动图）</description>
    </item>
    
    <item>
      <title>TCP UDP 总结</title>
      <link>https://TomatoAres.github.io/posts/network/tcp-udp/</link>
      <pubDate>Sun, 18 Aug 2019 23:30:07 +0800</pubDate>
      
      <guid>https://TomatoAres.github.io/posts/network/tcp-udp/</guid>
      <description>UDP 用户数据报协议，是一个无连接的简单的面向数据报的运输层协议。 UDP 不提供可靠性，它只是把应用程序传给 IP 层的数据报发送出去，但是并不能保证它们能到达目的地。由于 UDP 在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。
UDP 特点  无连接：UDP 是面向无连接的通讯协议，UDP 数据包括目的端口号和源端口号信息，由于通讯不需要连接，所以可以实现广播发送。 大小限制：UDP 传输数据时有大小限制，每个被传输的数据报必须限定在 64KB 之内。 不可靠： UDP 是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方。  应用：注重速度流畅的业务 UDP 是面向消息的协议，通信时不需要建立连接，数据的传输自然是不可靠的，UDP 一般用于多点通信和实时的数据业务，比如</description>
    </item>
    
  </channel>
</rss>